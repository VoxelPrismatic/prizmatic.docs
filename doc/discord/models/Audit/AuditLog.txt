{{loc}} discord.models.Audit

{{cls}} instance = AuditLog(*, too_many_args_to_list_here)

{{desc}} Represents an audit log

{{noinit}}

{{param}} webhooks [List[dict]]
    A list of webhooks

{{param}} users [List[dict]]
    A list of users that are in the audit log

{{param}} audit_log_entries [List[dict]]
    A list of events

{{param}} integrations [List[dict]]
    A list of integrations

{{param}} bot_obj [~/Bot]
    The bot object
    {{optn}}

{{prop}} webhooks [List[~/Webhook, dict]]
    A list of webhooks if `bot_obj` is not `None`, otherwise a list of
    raw webhooks

{{prop}} users [List[~/Member.User, dict]]
    A list of users if `bot_obj` is not `None`, otherwise a list of
    raw users

{{prop}} events [List[~.AuditEvent]]
    A list of events

{{prop}} integrations [List[~/Semi.SemiIntegration, dict]]
    A list of integrations if `bot_obj` is not `None`, otherwise a list of
    raw integrations

{{prop}} bot_obj [~/Bot, None]
    The bot object

{{bltin}} instance.__getitem__(key)
{{usage}} instance[key]

{{desc}} Either returns a ~.AuditEvent or a ~.AuditSearch object

{{param}} key [int, str, ~/Member.User]
    If `int`, then it will return that index in `instance.events` or it
    will filter by user ID if it is a user ID
    If `str`, then it will filter the events to that event type or by
    user ID if it is a user ID
    If `User`, then it will filter by that user

{{rtn}} [~.AuditSearch] The filtered events if `key` is a User, user ID,
or str
{{rtn}} [~.AuditEvent] The event if `key` is an index

{{bltin}} instance.__dict__()
{{usage}} dict(instance)

{{pydesc}} __dict__

{{rtn}} [dict]
