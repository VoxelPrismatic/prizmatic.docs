{{cls}} instance = Channel(*, too_many_args_to_list_here)

{{desc}} Represents a text channel

{{noinit}}

{{param}} id [str, ~/Snow, int]
    The Channel ID

{{param}} guild_id [str, ~/Snow, int]
    The Guild ID

{{param}} name [str]
    The name of the channel

{{param}} type [int]
    The type of channel, this should always be 0

{{param}} position [int]
    The position of the channel

{{param}} permission_overwrites [List[dict]]
    The overwrites

{{param}} rate_limit_per_user [int]
    The slowmode delay in seconds

{{param}} nsfw [bool]
    Whether or not the channel is marked as NSFW

{{param}} topic [str]
    The channel's topic

{{param}} last_message_id [str, ~/Snow, int]
    The ID of the latest message

{{param}} parent_id [str, ~/Snow, int]
    The ID of the channel's category

{{param}} last_pin_timestamp [str]
    The latest pin time

{{param}} bot_obj [~/Bot]
    The bot object

{{prop}} id [int]
    The ID of the channel

{{prop}} name [str]
    Name of the channel

{{prop}} pos [int]
    Position of the channel

{{prop}} slowmode [int]
    Slowmode duration in seconds

{{prop}} topic [str]
    The channel topic

{{prop}} guild_id [int]
    The guild ID

{{prop}} guild [~/Guild]
    The guild

{{prop}} category_id [int]
    The category ID

{{prop}} category [~.Category, None]
    The category, or None if there isn't one

{{prop}} bot_obj [~/Bot]
    The bot object

{{prop}} ping [str]
    Allows you to ping the channel

{{prop}} latest_text_id [int]
    ID of the most recent text

{{prop}} latest_text [~/Text.Text, None]
    The latest text or None if there isn't one

{{prop}} overwrites [~/Perms.Overwrites]
    The permission overwrites of the channel
    {{alias}} permission_overwrites

{{prop}} latest_pin_time [datetime.datetime]
    The time of the most recent pinned text

{{prop}} type [int]
    This should always be 0 unless you change it

{{}}

{{bltin}} instance.__str__()
{{usage}} str(instance)

{{desc}} Returns the channel name with a '#' in front

{{rtn}} [str]

{{bltin}} instance.__repr__()
{{usage}} repr(instance)

{{pydesc}} __repr__

{{rtn}} [str]

{{fn}} await instance.edit(*, too_many_args_to_list_here)

{{desc}} Edits the channel

{{note}} All of these parameters are optional

{{param}} name [str]
    The new name of the channel

{{param}} pos [int]
    The new position of the channel
    {{alias}} position

{{param}} topic [str]
    The new channel topic

{{param}} nsfw [bool]
    Whether or not the channel is NSFW

{{param}} slowmode [int]
    Slowmode duration in seconds

{{param}} overwrites [~/Perms.Overwrites, List[~/Perms.Overwrite], dict]
    The new overwrites
    {{alias}} permission_overwrites

{{param}} category [int, str, ~.Category]
    The new channel category, change to `False` to remove the category

{{rtn}} [~.Channel] The edited instance

{{err}} [TypeError] If the category or overwrites is invalid

{{fn}} await instance.refresh()

{{desc}} Refreshes the channel if you think it is out of date

{{rtn}} [~.Channel] The edited instance

{{fn}} await instance.send(text, *, tts, embed, file)

{{desc}} Sends a text message to the channel

{{param}} text [str]
    The content of the text message

{{param}} tts [bool]
    Whether or not TTS is enabled
    {{norm}} False

{{param}} embed [dict, ~/Embed]
    The embed object

{{param}} file [List[~/File.File], ~/File.File, ~/File.Files, file]
    The files you would like to send

{{rtn}} [~/Text.Text] The new text

{{fn}} await instance.rename(name)

{{desc}} Short for `await instance.edit(name = name)`

{{param}} name [str]
    The new name for the channel

{{rtn}} [~.Channel] The edited instance

{{fn}} await instance.move(pos)

{{desc}} Short for `await instance.edit(pos = pos)`

{{param}} pos [int]
    The new position for the channel

{{rtn}} [~.Channel] The edited instance

{{fn}} await instance.toggle_nsfw()

{{desc}} Short for `await instance.edit(nsfw = not instance.nsfw)`

{{rtn}} [~.Channel] The edited instance

{{fn}} await instance.set_nsfw()

{{desc}} Short for `await instance.edit(nsfw = True)`

{{rtn}} [~.Channel] The edited instance

{{fn}} await instance.set_sfw()

{{desc}} Short for `await instance.edit(nsfw = False)`

{{rtn}} [~.Channel] The edited instance

{{fn}} await instance.retopic(topic)

{{desc}} Short for `await instance.edit(topic = topic)`

{{param}} topic [str]
    The new topic for the channel

{{rtn}} [~.Channel] The edited instance

{{fn}} await instance.move_under(category)

{{desc}} Short for `await instance.edit(category = category)`

{{param}} category [str, int, ~.Category]
    The new channel category, set to `False` to remove the category

{{rtn}} [~.Channel] The edited instance

{{fn}} await instance.history(*, limit, before, near, after)

{{desc}} A bunch of messages

{{fn}} instance.get_text(id)

{{desc}} Gets a text given an ID

{{param}} id [int]
    ID of the text

{{rtn}} [~/Text.Text, None] The text, or None if it wasn't found

{{fn}} await instance.find_text(id)

{{desc}} Gets a text given an ID. This is basically the same as
`instance.get_text(id)` except for this function can also make the text
object if it wasn't found

{{param}} id [int]
    ID of the text

{{rtn}} [~/Text.Text, None] The text, or None if it wasn't found

{{fn}} await instance.delete()

{{desc}} Deletes the object and all corrosponding messages, overwrites,
etc

{{rtn}} [~/NonExistentObj] The deleted object that can be undeleted
