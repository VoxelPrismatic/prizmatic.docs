{{cls}} instance = Guild(*, too_many_args_to_list_here)

{{desc}} Represents a Guild

{{noinit}}

{{note}} A "guild" is referred to as a "server" in the UI

{{param}} id [str, ~/Snow, int]
    The guild ID

{{param}} name [str]
    The name of the guild

{{param}} splash [str]
    Hash of the splash image

{{param}} owner_id [str, ~/Snow, int]
    ID of the owner

{{param}} region [str]
    Voice region of the guild

{{param}} features [List[str]]
    A list of features available to the guild

{{param}} afk_channel_id [str, ~/Snow, int]
    The AFK VC ID

{{param}} afk_timeout [int]
    The AFK timeout, in seconds

{{param}} verification_level [int]
    The level of verification the guild requires

{{param}} emojis [List[dict]]
    A list of dict emoji objects

{{param}} default_message_notifications [int]
    The default message notificarion level

{{param}} explicit_content_filter [int]
    The nsfw filter level

{{param}} roles [List[dict]]
    A list of dict role objects

{{param}} mfa_level [int]
    The level of Multi-factor authentication

{{param}} application_id [str, ~/Snow, int]
    The app id of the bot that created the server, None if it wasn't made by
    a bot

{{param}} system_channel_id [str, ~/Snow, int]
    The channel ID of welcome messages, boost messages, and more

{{param}} system_channel_flags [int]
    Flags integer for things like boost/join messages

{{param}} rules_channel_id [str, ~/Snow, int]
    The ID of the rules channel

{{param}} description [str]
    Description of the server

{{param}} preferred_locale [str]
    Default language settings

{{param}} banner [str]
    Banner hash

{{param}} owner [bool]
    Whether or not the client is the owner of the guild

{{param}} permissions [int]
    Permissions integer of the clienr

{{param}} vanity_url_code [str]
    Vanity URL, eg discord.gg/custom_url_yeet

{{param}} max_presences [int]
    Maximum number of statuses, like "Playing a game lol"

{{param}} embed_enabled [bool]
    Whether or not the guild embed has been enabled

{{param}} premium_tier [int]
    Boost level of the server

{{param}} embed_channel_id [str, ~/Snow, int]
    The embed channel ID, if the embed is enabled

{{param}} joined_at [str]
    A standard ISO 8601 timestamp indicating when the client joined the
    guild

{{param}} large [bool]
    Whether or not the guild is considered "large"... ask Discord

{{param}} widget_channel_id [str, ~/Snow, int]
    The ID of the widget channel

{{param}} widget_enabled [bool]
    Whether or not the widget is enabled

{{param}} unavailable [bool]
    Whether or not the guild is offline

{{param}} member_count [int]
    Number of players in the guild

{{param}} members [List[dict]]
    A list of dict players in the guild

{{param}} voice_states [List[dict]]
    A list of voice states

{{param}} channels [List[dict]]
    A list of dict channels in the guild. Will automatically be formed into
    their respective objects eg a voice channel will be created as a VC

{{param}} presences [List[dict]]
    A list of statuses

{{param}} max_members [int]
    How many players this guild can have

{{param}} premium_subscription_count [int]
    How many players are currently boosting the guild

{{param}} lazy [bool]
    I don't know, discord doesn't document it

{{param}} bot_obj [~/Bot]
    The bot object... because I want to make sure you can access the bot
    from anywhere within your code... arhem d.py

{{prop}} id [int]
    ID of the guild

{{prop}} name [str]
    Name of the guild

{{prop}} icon_hash [str]
{{prop}} splash_hash [str]
{{prop}} banner_hash [str]
{{prop}} discovery_splash_hash [str]
    Hashes of assets

{{prop}} icon [str]
{{prop}} splash [str]
{{prop}} banner [str]
{{prop}} discovery_splash [str]
    URLs instead of hashes, useful if you want to download the file or
    upload it

{{prop}} afk_vc_id [int]
{{prop}} system_channel_id [int]
{{prop}} embed_channel_id [int]
{{prop}} widget_channel_id [int]
{{prop}} rules_channel_id [int]
    The special guild channel IDs, all names are self explanitory

{{prop}} afk_vc [~/Channel.AnyChannel]
{{prop}} system_channel [~/Channel.AnyChannel]
{{prop}} embed_channel [~/Channel.AnyChannel]
{{prop}} widget_channel [~/Channel.AnyChannel]
{{prop}} rules_channel [~/Channel.AnyChannel]
    The special guild channels, all names are self explanitory

{{prop}} is_owner [bool]
    Whether or not the client is the owner of the guild

{{loc}} discord.models.Channel
{{fn}} await instance.make_channel(name, *, topic, overwrites, slowmode,
nsfw, category)

{{desc}} Creates a text channel

{{param}} name [str]
    The name of the new channel

{{param}} topic [str]
    Topic of the new channel
    {{norm}} ""

{{param}} overwrites [List[dict, ~/Perms/Overwrite], ~/Perms/Overwrites]
    Channel overwrites
    {{norm}} []

{{param}} slowmode [int]
    The slowmode limit in seconds
    {{norm}} 0

{{param}} nsfw [bool]
    Whether or not this channel is NSFW
    {{norm}} False

{{param}} category [int, str, ~.Category]
    The category this channel belongs to
    If int, then it must be the ID
    If str, then it must be the name or ID
    If ~.Category, then it must be in this guild
    If None, then it means that there is no category
    {{norm}} None

{{rtn}} [~.Channel] The new channel

{{fn}} await instance.make_store(name, *, topic, overwrites, slowmode,
nsfw, category)

{{desc}} Creates a store channel under this category

{{param}} name [str]
    The name of the new channel

{{param}} topic [str]
    Topic of the new channel
    {{norm}} ""

{{param}} overwrites [List[dict, ~/Perms/Overwrite], ~/Perms/Overwrites]
    Channel overwrites
    {{norm}} []

{{param}} slowmode [int]
    The slowmode limit in seconds
    {{norm}} 0

{{param}} nsfw [bool]
    Whether or not this channel is NSFW
    {{norm}} False

{{param}} category [int, str, ~.Category]
    The category this channel belongs to
    If int, then it must be the ID
    If str, then it must be the name or ID
    If ~.Category, then it must be in this guild
    If None, then it means that there is no category
    {{norm}} None

{{rtn}} [~.StoreChannel] The new channel

{{fn}} await instance.make_news(name, *, topic, overwrites, slowmode,
nsfw, category)

{{desc}} Creates a news channel under this category

{{param}} name [str]
    The name of the new channel

{{param}} topic [str]
    Topic of the new channel
    {{norm}} ""

{{param}} overwrites [List[dict, ~/Perms/Overwrite], ~/Perms/Overwrites]
    Channel overwrites
    {{norm}} []

{{param}} slowmode [int]
    The slowmode limit in seconds
    {{norm}} 0

{{param}} nsfw [bool]
    Whether or not this channel is NSFW
    {{norm}} False

{{param}} category [int, str, ~.Category]
    The category this channel belongs to
    If int, then it must be the ID
    If str, then it must be the name or ID
    If ~.Category, then it must be in this guild
    If None, then it means that there is no category
    {{norm}} None

{{rtn}} [~.NewsChannel] The new channel

{{fn}} await instance.make_vc(name, *, bitrate, overwrites, limit,
category)

{{desc}} Creates a voice channel under this category

{{param}} name [str]
    The name of the new vc

{{param}} bitrate [int]
    The bitrate of this vc
    {{norm}} 64

{{param}} overwrites [List[dict, ~/Perms/Overwrite], ~/Perms/Overwrites]
    Channel overwrites

{{param}} limit [int]
    Number of users this vc can hold
    {{norm}} 0

{{param}} category [int, str, ~.Category]
    The category this channel belongs to
    If int, then it must be the ID
    If str, then it must be the name or ID
    If ~.Category, then it must be in this guild
    If None, then it means that there is no category
    {{norm}} None

{{rtn}} [~.VC] The new channel

{{bltin}} instance.__dict__()
{{usage}} dict(instance)

{{pydesc}} __dict__

{{rtn}} [dict]
